Option Explicit On

Module QRCode_encode_functions
    Public Function QRCode_GetVersion(ByVal ErrorCorrection As Integer, ByVal Textstring As String)
        Dim DataCodewords As Integer(,) = {{0, 0, 0, 0}, {17, 14, 11, 7}, {32, 26, 20, 14}, {53, 42, 32, 24}, {78, 62, 46, 34}, {106, 84, 60, 44}, {134, 106, 74, 58}, {154, 122, 86, 64}, {192, 152, 108, 84}, {230, 180, 130, 98}, {271, 213, 151, 119}, {321, 251, 177, 137}, {367, 287, 203, 155}, {425, 331, 241, 177}, {458, 362, 258, 194}, {520, 412, 292, 220}, {586, 450, 322, 250}, {644, 504, 364, 280}, {718, 560, 394, 310}, {792, 624, 442, 338}, {585, 666, 482, 382}, {929, 711, 509, 403}, {1003, 779, 565, 439}, {1091, 857, 611, 461}, {1171, 911, 661, 511}, {1273, 997, 715, 535}, {1367, 1059, 751, 593}, {1465, 1125, 805, 325}, {1528, 1190, 868, 658}, {1628, 1264, 908, 698}, {1732, 1370, 982, 742}, {1840, 1452, 1030, 790}, {1952, 1538, 1112, 842}, {2068, 1628, 1168, 898}, {2188, 1722, 1228, 958}, {2303, 1809, 1283, 983}, {2431, 1911, 1351, 1051}, {2563, 1989, 1423, 1093}, {2699, 2099, 1499, 1139}, {2809, 2213, 1579, 1219}, {2953, 2331, 1663, 1273}}

        ' Go through the range till the next higher version is found
        For i = 1 To 40
            If i > 9 Then
                If DataCodewords(i, ErrorCorrection) > (Textstring.Length + 3) Then
                    Return (i)
                End If
            ElseIf DataCodewords(i, ErrorCorrection) > (Textstring.Length + 2) Then
                Return (i)
            End If
        Next
        Return (-1)
    End Function

    Public Function QRCode_StartNew(ByVal Version As Integer, ByVal TileSize As Integer, ByVal ErrorCorrection As Integer, ByVal TextString As String, ByVal RandSize As Integer, Optional ByVal MaskForce As Integer = 0) As Bitmap
        ' Define QRCode
        Dim Size As Integer = ((Version * 4) + 17) * TileSize + (RandSize * 2) * TileSize
        Dim SizeQR As Integer = ((Version * 4) + 17)
        Dim QRCode_Bitmap As New Bitmap(Size, Size)
        Dim QRCode_Fast As New FastPixel(QRCode_Bitmap)
        Dim QRCode(SizeQR, SizeQR) As Integer
        Dim Mask As Integer = 0

        ' Clear th epicture
        QRCode.Initialize()

        ' Set the alignment patterns
        QRCode_Alignment_Draw(TileSize, SizeQR, Version, QRCode)

        ' Reserve the information part
        QRCode_Reserve_Information(TileSize, Version, SizeQR, QRCode)

        ' Add a Textstring
        QRCode_AddString(TileSize, SizeQR, TextString, Version, ErrorCorrection, QRCode)

        ' Mask the QR-Code
        Mask = QRCode_Mask(TileSize, SizeQR, QRCode, MaskForce)

        ' Set the alignment patterns again
        QRCode_Alignment_Draw(TileSize, SizeQR, Version, QRCode)

        ' Reserve the information part again
        QRCode_Reserve_Information(TileSize, Version, SizeQR, QRCode)

        ' Add final information
        QRCode_Add_FormatString(TileSize, SizeQR, Mask, ErrorCorrection, QRCode)
        QRCode_Add_VersonString(TileSize, SizeQR, Version, QRCode)

        ' Lock the Picture
        QRCode_Fast.Lock()

        ' Draw the Picture
        QRCode_Draw_QRCode(TileSize, SizeQR, QRCode, RandSize, QRCode_Fast)

        ' Unlock the picture
        QRCode_Fast.Unlock(True)

        ' Return QRCode
        Return (QRCode_Bitmap)
    End Function

    Private Sub QRCode_Add_FormatString(ByVal TileSize As Integer, ByVal Size As Integer, ByVal Mask As Integer, ByVal ErrorCorrection As Integer, ByRef QRCode As Integer(,))
        Dim DataString As UInt16 = 0
        Dim ErrorStrings As UInt16(,) = {{30660, 29427, 32170, 30877, 26159, 25368, 27713, 26998}, {21522, 20773, 24188, 23371, 17913, 16590, 20375, 19104}, {13663, 12392, 16177, 14854, 9396, 8579, 11994, 11245}, {5769, 5054, 7399, 6608, 1890, 597, 3340, 2107}}

        ' Get the correct data
        DataString = ErrorStrings(ErrorCorrection, Mask)

        ' Draw the Format String to the QR Code
        For i = 1 To 6
            If ((DataString >> (i - 1)) And 1) = 1 Then
                QRCode_Draw_Tile(TileSize, 9, i, QRCode)
            Else
                QRCode_Clear_Tile(TileSize, 9, i, QRCode)
            End If

            If ((DataString >> (14 - i + 1)) And 1) = 1 Then
                QRCode_Draw_Tile(TileSize, i, 9, QRCode)
            Else
                QRCode_Clear_Tile(TileSize, i, 9, QRCode)
            End If
        Next

        If ((DataString >> (8)) And 1) = 1 Then
            QRCode_Draw_Tile(TileSize, 8, 9, QRCode)
        Else
            QRCode_Clear_Tile(TileSize, 8, 9, QRCode)
        End If
        If ((DataString >> (7)) And 1) = 1 Then
            QRCode_Draw_Tile(TileSize, 9, 9, QRCode)
        Else
            QRCode_Clear_Tile(TileSize, 9, 9, QRCode)
        End If
        If ((DataString >> (6)) And 1) = 1 Then
            QRCode_Draw_Tile(TileSize, 9, 8, QRCode)
        Else
            QRCode_Clear_Tile(TileSize, 9, 8, QRCode)
        End If

        For i = 0 To 6
            If ((DataString >> (i)) And 1) = 1 Then
                QRCode_Draw_Tile(TileSize, Size - i, 9, QRCode)
            Else
                QRCode_Clear_Tile(TileSize, Size - i, 9, QRCode)
            End If
            If ((DataString >> (14 - i)) And 1) = 1 Then
                QRCode_Draw_Tile(TileSize, 9, Size - i, QRCode)
            Else
                QRCode_Clear_Tile(TileSize, 9, Size - i, QRCode)
            End If
        Next

        If ((DataString >> (7)) And 1) = 1 Then
            QRCode_Draw_Tile(TileSize, Size - 7, 9, QRCode)
        Else
            QRCode_Clear_Tile(TileSize, Size - 7, 9, QRCode)
        End If
    End Sub

    Private Sub QRCode_Add_VersonString(ByVal TileSize As Integer, ByVal Size As Integer, ByVal Version As Integer, ByRef QRCode As Integer(,))
        Dim DataString As UInt32 = 0
        Dim VersionStrings As UInt32() = {0, 0, 0, 0, 0, 0, 0, 31892, 34236, 39576, 42194, 48118, 51042, 55366, 58892, 63784, 68472, 70748, 76308, 79152, 84388, 87680, 92360, 96236, 102084, 102880, 110504, 110732, 117784, 119612, 126324, 127568, 133584, 136944, 141496, 145304, 150280, 152616, 158304, 161088, 167016}

        ' Get the correct data
        DataString = VersionStrings(Version)

        ' Draw the Version String to the QR Code
        If DataString <> 0 Then
            For i = 1 To 6
                For e = 0 To 2
                    If ((DataString >> ((i - 1) * 3 + e)) And 1) = 1 Then
                        QRCode_Draw_Tile(TileSize, i, Size - 8 - 2 + e, QRCode)
                        QRCode_Draw_Tile(TileSize, Size - 8 - 2 + e, i, QRCode)
                    Else
                        QRCode_Clear_Tile(TileSize, i, Size - 8 - 2 + e, QRCode)
                        QRCode_Clear_Tile(TileSize, Size - 8 - 2 + e, i, QRCode)
                    End If
                Next
            Next
        End If
    End Sub

    Private Sub QRCode_AddString(ByVal TileSize As Integer, ByVal Size As Integer, ByVal Text As String, ByVal Version As Integer, ByVal ErrorCorrection As Integer, ByRef QRCode As Integer(,))
        Dim Data As Byte() = {0}
        Dim DataText As Byte() = QRCode_String_to_binary(Text, Version)
        Dim DataLength As Integer = 0

        ' Set the data header
        Data(0) = 4

        ' Set the length of the string
        Select Case Version
            Case 1 To 9
                ReDim Preserve Data(1)
                Data(1) = (Text.Length And 255)
                DataLength = 2
            Case 10 To 40
                ReDim Preserve Data(4)
                Data(1) = (Text.Length / 256)
                Data(2) = (Text.Length And 255)
                DataLength = 3
        End Select

        ' Copy the byte Array
        ReDim Preserve Data(DataText.Length + 4)
        DataText.CopyTo(Data, DataLength)

        ' Move the data
        Data(0) = (Data(0) << 4) And 240
        For i = 0 To Data.Length - 2
            Data(i) = (Data(i) And 240) Or ((Data(i + 1) >> 4) And 15)
            Data(i + 1) = ((Data(i + 1) << 4) And 240)
        Next

        QRCode_Byte_FillUp(Data, Version, (Text.Length + DataLength - 1), ErrorCorrection)
        QRCode_Byte_ReedSalomon(Data, Version, ErrorCorrection, DataLength)
        QRCode_Byte_CvtBinary(Data, Version, DataLength)
        QRCode_Bytes_Draw(TileSize, Data, Size, QRCode)
    End Sub

    Private Sub QRCode_Byte_CvtBinary(ByRef Data As Byte(), ByVal Version As Integer, ByRef Length As Integer)
        Dim ReminderBit As Integer() = {0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0}
        Dim BinaryData(Length * 8) As Byte

        ' Convert the Data into binary
        For i = 0 To Length - 1
            For e = 0 To 7
                BinaryData((i * 8) + (7 - e)) = CByte((Data(i) >> e) And 1)
            Next
        Next

        ' Check if Reminder Bits have to be added
        If ReminderBit(Version) > 0 Then
            ReDim Preserve BinaryData(BinaryData.Length - 1 + ReminderBit(Version))
            For i = (Length * 8) To (Length * 8 + ReminderBit(Version))
                BinaryData(i) = 0
            Next
        End If

        ' Set the new length
        Length = BinaryData.Length - 1

        ' Copy the Array
        ReDim Data(Length)
        BinaryData.CopyTo(Data, 0)
    End Sub

    Private Sub QRCode_Byte_FillUp(ByRef Data As Byte(), ByVal Version As Integer, ByRef Length As Integer, ByVal ErrorCorrection As Integer)
        Dim DataCodewords As Integer(,) = {{0, 0, 0, 0}, {17, 14, 11, 7}, {32, 26, 20, 14}, {53, 42, 32, 24}, {78, 62, 46, 34}, {106, 84, 60, 44}, {134, 106, 74, 58}, {154, 122, 86, 64}, {192, 152, 108, 84}, {230, 180, 130, 98}, {271, 213, 151, 119}, {321, 251, 177, 137}, {367, 287, 203, 155}, {425, 331, 241, 177}, {458, 362, 258, 194}, {520, 412, 292, 220}, {586, 450, 322, 250}, {644, 504, 364, 280}, {718, 560, 394, 310}, {792, 624, 442, 338}, {585, 666, 482, 382}, {929, 711, 509, 403}, {1003, 779, 565, 439}, {1091, 857, 611, 461}, {1171, 911, 661, 511}, {1273, 997, 715, 535}, {1367, 1059, 751, 593}, {1465, 1125, 805, 325}, {1528, 1190, 868, 658}, {1628, 1264, 908, 698}, {1732, 1370, 982, 742}, {1840, 1452, 1030, 790}, {1952, 1538, 1112, 842}, {2068, 1628, 1168, 898}, {2188, 1722, 1228, 958}, {2303, 1809, 1283, 983}, {2431, 1911, 1351, 1051}, {2563, 1989, 1423, 1093}, {2699, 2099, 1499, 1139}, {2809, 2213, 1579, 1219}, {2953, 2331, 1663, 1273}}

        ' Read the nescessary bytes
        Dim CodeWords As Integer = DataCodewords(Version, ErrorCorrection)

        ' Reedfine Data Array to the correct length
        ReDim Preserve Data(CodeWords - 1)

        While (Length < (CodeWords - 1))
            Length += 1
            Data(Length) = 236
            Length += 1
            If Length >= Data.Length Then
                Exit While
            End If
            Data(Length) = 17
        End While
    End Sub

    Private Sub QRCode_Byte_ReedSalomon(ByRef Data As Byte(), ByVal Version As Integer, ByVal ErrorCorrection As Integer, ByRef Length As Integer)
        Dim Exponents_to_Values As UInt16() = {1, 2, 4, 8, 16, 32, 64, 128, 29, 58, 116, 232, 205, 135, 19, 38, 76, 152, 45, 90, 180, 117, 234, 201, 143, 3, 6, 12, 24, 48, 96, 192, 157, 39, 78, 156, 37, 74, 148, 53, 106, 212, 181, 119, 238, 193, 159, 35, 70, 140, 5, 10, 20, 40, 80, 160, 93, 186, 105, 210, 185, 111, 222, 161, 95, 190, 97, 194, 153, 47, 94, 188, 101, 202, 137, 15, 30, 60, 120, 240, 253, 231, 211, 187, 107, 214, 177, 127, 254, 225, 223, 163, 91, 182, 113, 226, 217, 175, 67, 134, 17, 34, 68, 136, 13, 26, 52, 104, 208, 189, 103, 206, 129, 31, 62, 124, 248, 237, 199, 147, 59, 118, 236, 197, 151, 51, 102, 204, 133, 23, 46, 92, 184, 109, 218, 169, 79, 158, 33, 66, 132, 21, 42, 84, 168, 77, 154, 41, 82, 164, 85, 170, 73, 146, 57, 114, 228, 213, 183, 115, 230, 209, 191, 99, 198, 145, 63, 126, 252, 229, 215, 179, 123, 246, 241, 255, 227, 219, 171, 75, 150, 49, 98, 196, 149, 55, 110, 220, 165, 87, 174, 65, 130, 25, 50, 100, 200, 141, 7, 14, 28, 56, 112, 224, 221, 167, 83, 166, 81, 162, 89, 178, 121, 242, 249, 239, 195, 155, 43, 86, 172, 69, 138, 9, 18, 36, 72, 144, 61, 122, 244, 245, 247, 243, 251, 235, 203, 139, 11, 22, 44, 88, 176, 125, 250, 233, 207, 131, 27, 54, 108, 216, 173, 71, 142, 1, 44, 88, 176, 125, 250, 233, 207, 131, 27, 54, 108, 216, 173, 71, 142, 1}
        Dim Values_to_Exponents As UInt16() = {0, 0, 1, 25, 2, 50, 26, 198, 3, 223, 51, 238, 27, 104, 199, 75, 4, 100, 224, 14, 52, 141, 239, 129, 28, 193, 105, 248, 200, 8, 76, 113, 5, 138, 101, 47, 225, 36, 15, 33, 53, 147, 142, 218, 240, 18, 130, 69, 29, 181, 194, 125, 106, 39, 249, 185, 201, 154, 9, 120, 77, 228, 114, 166, 6, 191, 139, 98, 102, 221, 48, 253, 226, 152, 37, 179, 16, 145, 34, 136, 54, 208, 148, 206, 143, 150, 219, 189, 241, 210, 19, 92, 131, 56, 70, 64, 30, 66, 182, 163, 195, 72, 126, 110, 107, 58, 40, 84, 250, 133, 186, 61, 202, 94, 155, 159, 10, 21, 121, 43, 78, 212, 229, 172, 115, 243, 167, 87, 7, 112, 192, 247, 140, 128, 99, 13, 103, 74, 222, 237, 49, 197, 254, 24, 227, 165, 153, 119, 38, 184, 180, 124, 17, 68, 146, 217, 35, 32, 137, 46, 55, 63, 209, 91, 149, 188, 207, 205, 144, 135, 151, 178, 220, 252, 190, 97, 242, 86, 211, 171, 20, 42, 93, 158, 132, 60, 57, 83, 71, 109, 65, 162, 31, 45, 67, 216, 183, 123, 164, 118, 196, 23, 73, 236, 127, 12, 111, 246, 108, 161, 59, 82, 41, 157, 85, 170, 251, 96, 134, 177, 187, 204, 62, 90, 203, 89, 95, 176, 156, 169, 160, 81, 11, 245, 22, 235, 122, 117, 44, 215, 79, 174, 213, 233, 230, 231, 173, 232, 116, 214, 244, 234, 168, 80, 88, 175, 79, 174, 213, 233, 230, 231, 173, 232, 116, 214, 244, 234, 168, 80, 88, 175}
        Dim Error_Correction As Integer(,) = {{0, 0, 0, 0}, {7, 10, 13, 17}, {10, 16, 22, 28}, {15, 26, 18, 22}, {20, 18, 26, 16}, {26, 24, 18, 22}, {18, 16, 24, 28}, {20, 18, 18, 26}, {24, 22, 22, 26}, {30, 22, 20, 24}, {18, 26, 24, 28}, {20, 30, 28, 24}, {24, 22, 26, 28}, {26, 22, 24, 22}, {30, 24, 20, 24}, {22, 24, 30, 24}, {24, 28, 24, 30}, {28, 28, 28, 28}, {30, 26, 28, 28}, {28, 26, 26, 26}, {28, 26, 30, 28}, {28, 26, 28, 30}, {28, 28, 30, 24}, {30, 28, 30, 30}, {30, 28, 30, 30}, {26, 28, 30, 30}, {28, 28, 28, 30}, {30, 28, 30, 30}, {30, 28, 30, 30}, {30, 28, 30, 30}, {30, 28, 30, 30}, {30, 28, 30, 30}, {30, 28, 30, 30}, {30, 28, 30, 30}, {30, 28, 30, 30}, {30, 28, 30, 30}, {30, 28, 30, 30}, {30, 28, 30, 30}, {30, 28, 30, 30}, {30, 28, 30, 30}, {30, 28, 30, 30}}
        Dim Generator_Polynominals As UInt16(,) = {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {87, 229, 146, 149, 238, 102, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {251, 67, 46, 61, 118, 70, 64, 94, 32, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {74, 152, 176, 100, 86, 100, 106, 104, 130, 218, 206, 140, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {8, 183, 61, 91, 202, 37, 51, 58, 58, 237, 140, 124, 5, 99, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {120, 104, 107, 109, 102, 161, 76, 3, 91, 191, 147, 169, 182, 194, 225, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {43, 139, 206, 78, 43, 239, 123, 206, 214, 147, 24, 99, 150, 39, 243, 163, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {215, 234, 158, 94, 184, 97, 118, 170, 79, 187, 152, 148, 252, 179, 5, 98, 96, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {17, 60, 79, 50, 61, 163, 26, 187, 202, 180, 221, 225, 83, 239, 156, 164, 212, 212, 188, 190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {210, 171, 247, 242, 93, 230, 14, 109, 221, 53, 200, 74, 8, 172, 98, 80, 219, 134, 160, 105, 165, 231, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {229, 121, 135, 48, 211, 117, 251, 126, 159, 180, 169, 152, 192, 226, 228, 218, 111, 0, 117, 232, 87, 96, 227, 21, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {173, 125, 158, 2, 103, 182, 118, 17, 145, 201, 111, 28, 165, 53, 161, 21, 245, 142, 13, 102, 48, 227, 153, 145, 218, 70, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {168, 223, 200, 104, 224, 234, 108, 180, 110, 190, 195, 147, 205, 27, 232, 201, 21, 43, 245, 87, 42, 195, 212, 119, 242, 37, 9, 123, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {41, 173, 145, 152, 216, 31, 179, 182, 50, 48, 110, 86, 239, 96, 222, 125, 42, 173, 226, 193, 224, 130, 156, 37, 251, 216, 238, 40, 192, 180}}
        Dim Block_1_to_10 As Integer(,,) = {{{26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {35, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {35, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {50, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {50, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {25, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {67, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {33, 33, 34, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {33, 33, 34, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{86, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {43, 43, 43, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {43, 43, 43, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {43, 43, 43, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{98, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {49, 49, 49, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {32, 32, 33, 33, 33, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {39, 39, 39, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{121, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {60, 60, 61, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {40, 40, 40, 40, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {40, 40, 40, 40, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{146, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {58, 58, 58, 59, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {36, 36, 36, 36, 37, 37, 37, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {36, 36, 36, 36, 37, 37, 37, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{86, 86, 87, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {69, 69, 69, 69, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {43, 43, 43, 43, 43, 43, 44, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {43, 43, 43, 43, 43, 43, 44, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}}
        Dim Block_11_to_20 As Integer(,,) = {{{101, 101, 101, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {80, 81, 81, 81, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {50, 50, 50, 50, 51, 51, 51, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{116, 116, 117, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {58, 58, 58, 58, 58, 58, 59, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{133, 133, 133, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {59, 59, 59, 59, 59, 59, 59, 59, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {44, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{145, 145, 145, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {64, 64, 64, 64, 65, 65, 65, 65, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{109, 109, 109, 109, 109, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{122, 122, 122, 122, 122, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {73, 73, 73, 73, 73, 73, 73, 74, 74, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{135, 136, 136, 136, 136, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{150, 150, 150, 150, 150, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {69, 69, 69, 69, 69, 69, 69, 69, 69, 70, 70, 70, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{141, 141, 141, 142, 142, 142, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {70, 70, 70, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{135, 135, 135, 136, 136, 136, 136, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {67, 67, 67, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}}
        Dim Block_21_to_30 As Integer(,,) = {{{144, 144, 144, 144, 145, 145, 145, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{139, 139, 140, 140, 140, 140, 140, 140, 140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{151, 151, 151, 151, 152, 152, 152, 152, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{147, 147, 147, 147, 147, 147, 148, 148, 148, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {73, 73, 73, 73, 73, 73, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{132, 132, 132, 132, 132, 132, 132, 132, 133, 133, 133, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {75, 75, 75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 143, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{152, 152, 152, 152, 152, 152, 152, 152, 153, 153, 153, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 74, 74, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{147, 147, 147, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {73, 73, 73, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{146, 146, 146, 146, 146, 146, 146, 147, 147, 147, 147, 147, 147, 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 74, 74, 74, 74, 74, 74, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{145, 145, 145, 145, 145, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}}
        Dim Block_31_to_40 As Integer(,,) = {{{145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 146, 146, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 146, 146, 146, 146, 146, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 152, 152, 152, 152, 152, 152, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{151, 151, 151, 151, 151, 151, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 153, 153, 153, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, {{152, 152, 152, 152, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 0, 0, 0, 0, 0, 0, 0}}, {{147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 148, 148, 148, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 0, 0, 0, 0}}, {{148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 149, 149, 149, 149, 149, 149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46}}}

        ' Get the Number of Error Connection Code Words
        Dim Error_Correction_Cord_Words As Integer = Error_Correction(Version, ErrorCorrection)

        ' Define DataArray to Work with
        Dim DataArray As UInt16() = {0}
        Dim DataArray_CodeWords As Byte() = {0}
        Dim DataSave As UInt16() = {0}

        ' Define Offset Counter
        Dim OffsetCounter As Integer = 0
        Dim SaveCounter As Integer = 0

        ' Temp Variable
        Dim TempCalculation As Integer = 0

        ' Get the first number of code word counts
        Dim CodeWordCounts As Integer = 0

        For f = 0 To 80
            Select Case Version
                Case 1 To 10
                    CodeWordCounts = Block_1_to_10(Version - 1, ErrorCorrection, f)
                Case 11 To 20
                    CodeWordCounts = Block_11_to_20(Version - 11, ErrorCorrection, f)
                Case 21 To 30
                    CodeWordCounts = Block_21_to_30(Version - 21, ErrorCorrection, f)
                Case 31 To 40
                    CodeWordCounts = Block_31_to_40(Version - 31, ErrorCorrection, f)
            End Select

            ' Check if exit
            If CodeWordCounts = 0 Then
                Exit For
            End If

            ' Redefine the DataArray
            ReDim DataArray(CodeWordCounts)

            ' Set the Array
            For i = 0 To (CodeWordCounts - Error_Correction_Cord_Words) - 1
                If ((i + SaveCounter) < Data.Length) Then
                    DataArray(i) = Data(i + SaveCounter)
                Else
                    DataArray(i) = 0
                End If
            Next

            ' Redefine the CodeWord Array
            ReDim DataArray_CodeWords(CodeWordCounts)

            For i = 1 To (CodeWordCounts - Error_Correction_Cord_Words)
                ' Look up Alpha and add it to CodeWord
                For e = 0 To Error_Correction_Cord_Words - 1
                    TempCalculation = CInt(Generator_Polynominals(Error_Correction_Cord_Words, e)) + CInt(Values_to_Exponents(DataArray(0)))
                    If TempCalculation > 255 Then
                        DataArray_CodeWords(e) = CByte(TempCalculation Mod 255)
                    Else
                        DataArray_CodeWords(e) = CByte(TempCalculation)
                    End If
                    DataArray_CodeWords(e) = Exponents_to_Values(DataArray_CodeWords(e))
                Next

                ' Delete the first entry from the DataArray
                For e = 0 To CodeWordCounts - 2
                    DataArray(e) = DataArray(e + 1)
                Next
                DataArray(CodeWordCounts - 1) = 0

                ' Do an XOR
                For e = 0 To Error_Correction_Cord_Words - 1
                    DataArray(e) = DataArray_CodeWords(e) Xor DataArray(e)
                Next
            Next

            ' Save the Data
            ReDim Preserve DataSave(DataSave.Length + Error_Correction_Cord_Words - 1)
            For i = 0 To Error_Correction_Cord_Words - 1
                DataSave(i + OffsetCounter) = DataArray(i)
            Next

            ' Increment Offset Counter
            OffsetCounter += Error_Correction_Cord_Words
            SaveCounter += (CodeWordCounts - Error_Correction_Cord_Words)
        Next

        ReDim Preserve DataSave(DataSave.Length - 2)

        ' Get the number of Blocks and the highest CodeWords
        Dim NumberOfBlocks As Integer = 0
        Dim MaxCodeWords As Integer = 0
        For f = 0 To 80
            Select Case Version
                Case 1 To 10
                    CodeWordCounts = Block_1_to_10(Version - 1, ErrorCorrection, f)
                Case 11 To 20
                    CodeWordCounts = Block_11_to_20(Version - 11, ErrorCorrection, f)
                Case 21 To 30
                    CodeWordCounts = Block_21_to_30(Version - 21, ErrorCorrection, f)
                Case 31 To 40
                    CodeWordCounts = Block_31_to_40(Version - 31, ErrorCorrection, f)
            End Select

            ' Check if exit
            If CodeWordCounts = 0 Then
                Exit For
            Else
                NumberOfBlocks += 1

                If CodeWordCounts > MaxCodeWords Then
                    MaxCodeWords = CodeWordCounts
                End If
            End If
        Next

        ' Split the data array into blocks
        Dim NewDataArray(NumberOfBlocks - 1, MaxCodeWords - Error_Correction_Cord_Words)
        Array.Clear(NewDataArray, 0, NewDataArray.Length - 1)
        OffsetCounter = 0
        For f = 0 To NumberOfBlocks - 1
            Select Case Version
                Case 1 To 10
                    CodeWordCounts = Block_1_to_10(Version - 1, ErrorCorrection, f)
                Case 11 To 20
                    CodeWordCounts = Block_11_to_20(Version - 11, ErrorCorrection, f)
                Case 21 To 30
                    CodeWordCounts = Block_21_to_30(Version - 21, ErrorCorrection, f)
                Case 31 To 40
                    CodeWordCounts = Block_31_to_40(Version - 31, ErrorCorrection, f)
            End Select

            ' Set the Array
            For i = 0 To (CodeWordCounts - Error_Correction_Cord_Words) - 1
                If ((i + OffsetCounter) < Data.Length) Then
                    NewDataArray(f, i) = Data(i + OffsetCounter)
                Else
                    NewDataArray(f, i) = 0
                End If
            Next

            OffsetCounter += (CodeWordCounts - Error_Correction_Cord_Words)
        Next

        ' Split the Encoded Array into blocks
        Dim NewSaveArray(NumberOfBlocks - 1, Error_Correction_Cord_Words - 1)
        Array.Clear(NewSaveArray, 0, NewSaveArray.Length - 1)
        OffsetCounter = 0
        For f = 0 To NumberOfBlocks - 1
            Select Case Version
                Case 1 To 10
                    CodeWordCounts = Block_1_to_10(Version - 1, ErrorCorrection, f)
                Case 11 To 20
                    CodeWordCounts = Block_11_to_20(Version - 11, ErrorCorrection, f)
                Case 21 To 30
                    CodeWordCounts = Block_21_to_30(Version - 21, ErrorCorrection, f)
                Case 31 To 40
                    CodeWordCounts = Block_31_to_40(Version - 31, ErrorCorrection, f)
            End Select

            ' Set the Array
            For i = 0 To Error_Correction_Cord_Words - 1
                NewSaveArray(f, i) = DataSave(i + OffsetCounter)
            Next

            OffsetCounter += Error_Correction_Cord_Words
        Next

        ' Interleave the Data
        ReDim Data(NumberOfBlocks * MaxCodeWords)
        Array.Clear(Data, 0, Data.Length - 1)
        OffsetCounter = 0
        For f = 0 To MaxCodeWords - Error_Correction_Cord_Words - 1
            For i = 0 To NumberOfBlocks - 1
                Select Case Version
                    Case 1 To 10
                        CodeWordCounts = Block_1_to_10(Version - 1, ErrorCorrection, i)
                    Case 11 To 20
                        CodeWordCounts = Block_11_to_20(Version - 11, ErrorCorrection, i)
                    Case 21 To 30
                        CodeWordCounts = Block_21_to_30(Version - 21, ErrorCorrection, i)
                    Case 31 To 40
                        CodeWordCounts = Block_31_to_40(Version - 31, ErrorCorrection, i)
                End Select
                If f < (CodeWordCounts - Error_Correction_Cord_Words) Then
                    Data(OffsetCounter) = NewDataArray(i, f)
                    OffsetCounter += 1
                End If
            Next
        Next

        ' Interleave the error words
        For f = 0 To Error_Correction_Cord_Words - 1
            For i = 0 To NumberOfBlocks - 1
                Data(OffsetCounter) = NewSaveArray(i, f)
                OffsetCounter += 1
            Next
        Next

        ' Set the length
        Length = OffsetCounter
    End Sub

    Private Function QRCode_String_to_binary(ByVal Text As String, ByVal Version As Integer) As Byte()
        Dim enc As System.Text.Encoding = System.Text.Encoding.UTF8

        Return (enc.GetBytes(Text))
    End Function

    Private Function QRCode_Mask(ByVal Tilesize As Integer, ByVal Size As Integer, ByRef QRCode As Integer(,), Optional ByVal ForceMask As Integer = -1) As Integer
        Dim Penalty(8) As Integer
        Dim QRCode_Mask_Pic(Size, Size) As Integer
        Dim PenaltyMin As Integer = 1000000
        Dim Mask As Integer = 0

        If ForceMask > -1 Then
            Mask = ForceMask
        Else
            For i = 0 To 7
                QRCode_Mask_Pic = QRCode.Clone
                QRCode_Mask_Draw(Tilesize, Size, i, QRCode_Mask_Pic)
                Penalty(i) = QRCode_Penalty_One(Tilesize, Size, QRCode_Mask_Pic)
                Penalty(i) += QRCode_Penalty_Two(Tilesize, Size, QRCode_Mask_Pic)
                Penalty(i) += QRCode_Penalty_Three(Tilesize, Size, QRCode_Mask_Pic)
                Penalty(i) += QRCode_Penalty_Four(Tilesize, Size, QRCode_Mask_Pic)
            Next

            For i = 0 To 7
                If Penalty(i) < PenaltyMin Then
                    PenaltyMin = Penalty(i)
                    If i <> 4 Then
                        Mask = i
                    End If
                End If
            Next

        End If

        ' Mask the QR-Code
        QRCode_Mask_Draw(Tilesize, Size, Mask, QRCode)

        ' Return the mask
        Return (Mask)
    End Function

    Private Sub QRCode_Mask_Draw(ByVal Tilesize As Integer, ByVal Size As Integer, ByVal Mask As Integer, ByRef QRCode As Integer(,))
        Select Case Mask
            Case 0
                For i = 0 To Size - 1
                    For e = 0 To Size - 1
                        If (i + e) Mod 2 = 0 Then
                            If QRCode_Check_Tile(Tilesize, i + 1, e + 1, QRCode) = 1 Then
                                QRCode_Clear_Tile(Tilesize, i + 1, e + 1, QRCode)
                            Else
                                QRCode_Draw_Tile(Tilesize, i + 1, e + 1, QRCode)
                            End If
                        End If
                    Next
                Next
            Case 1
                For i = 0 To Size - 1
                    For e = 0 To Size - 1
                        If (i) Mod 2 = 0 Then
                            If QRCode_Check_Tile(Tilesize, i + 1, e + 1, QRCode) = 1 Then
                                QRCode_Clear_Tile(Tilesize, i + 1, e + 1, QRCode)
                            Else
                                QRCode_Draw_Tile(Tilesize, i + 1, e + 1, QRCode)
                            End If
                        End If
                    Next
                Next
            Case 2
                For i = 0 To Size - 1
                    For e = 0 To Size - 1
                        If (e) Mod 2 = 0 Then
                            If QRCode_Check_Tile(Tilesize, i + 1, e + 1, QRCode) = 1 Then
                                QRCode_Clear_Tile(Tilesize, i + 1, e + 1, QRCode)
                            Else
                                QRCode_Draw_Tile(Tilesize, i + 1, e + 1, QRCode)
                            End If
                        End If
                    Next
                Next
            Case 3
                For i = 0 To Size - 1
                    For e = 0 To Size - 1
                        If (i + e) Mod 3 = 0 Then
                            If QRCode_Check_Tile(Tilesize, i + 1, e + 1, QRCode) = 1 Then
                                QRCode_Clear_Tile(Tilesize, i + 1, e + 1, QRCode)
                            Else
                                QRCode_Draw_Tile(Tilesize, i + 1, e + 1, QRCode)
                            End If
                        End If
                    Next
                Next
            Case 4
                For i = 0 To Size - 1
                    For e = 0 To Size - 1

                        If ((i / 2) + (e / 3)) Mod 2 = 0 Then
                            If QRCode_Check_Tile(Tilesize, i + 1, e + 1, QRCode) = 1 Then
                                QRCode_Clear_Tile(Tilesize, i + 1, e + 1, QRCode)
                            Else
                                QRCode_Draw_Tile(Tilesize, i + 1, e + 1, QRCode)
                            End If
                        End If
                    Next
                Next
            Case 5
                For i = 0 To Size - 1
                    For e = 0 To Size - 1

                        If ((i * e) Mod 2) + ((i * e) Mod 3) = 0 Then
                            If QRCode_Check_Tile(Tilesize, i + 1, e + 1, QRCode) = 1 Then
                                QRCode_Clear_Tile(Tilesize, i + 1, e + 1, QRCode)
                            Else
                                QRCode_Draw_Tile(Tilesize, i + 1, e + 1, QRCode)
                            End If
                        End If
                    Next
                Next
            Case 6
                For i = 0 To Size - 1
                    For e = 0 To Size - 1

                        If (((i * e) Mod 2) + ((i * e) Mod 3)) Mod 2 = 0 Then
                            If QRCode_Check_Tile(Tilesize, i + 1, e + 1, QRCode) = 1 Then
                                QRCode_Clear_Tile(Tilesize, i + 1, e + 1, QRCode)
                            Else
                                QRCode_Draw_Tile(Tilesize, i + 1, e + 1, QRCode)
                            End If
                        End If
                    Next
                Next
            Case 7
                For i = 0 To Size - 1
                    For e = 0 To Size - 1

                        If (((i + e) Mod 2) + ((i * e) Mod 3)) Mod 2 = 0 Then
                            If QRCode_Check_Tile(Tilesize, i + 1, e + 1, QRCode) = 1 Then
                                QRCode_Clear_Tile(Tilesize, i + 1, e + 1, QRCode)
                            Else
                                QRCode_Draw_Tile(Tilesize, i + 1, e + 1, QRCode)
                            End If
                        End If
                    Next
                Next
        End Select
    End Sub

    Private Function QRCode_Penalty_One(ByVal Tilesize As Integer, ByVal Size As Integer, ByRef QRCode As Integer(,)) As Integer
        Dim Color As Integer = 0
        Dim OldColor As Integer = 0
        Dim Steps As Integer = 0
        Dim Penalty As Integer = 0

        For i = 1 To Size
            For e = 1 To Size
                Color = QRCode_Check_Tile(Tilesize, i, e, QRCode)
                If Color <> OldColor Then
                    OldColor = Color
                    If Steps > 4 Then
                        Penalty += Steps - 2
                    End If
                    Steps = 1
                Else
                    Steps += 1
                End If
            Next
            If Steps > 4 Then
                Penalty += Steps - 2
            End If
            Steps = 1
        Next
        For i = 1 To Size
            For e = 1 To Size
                Color = QRCode_Check_Tile(Tilesize, e, i, QRCode)
                If Color <> OldColor Then
                    OldColor = Color
                    If Steps > 4 Then
                        Penalty += Steps - 2
                    End If
                    Steps = 1
                Else
                    Steps += 1
                End If
            Next
            If Steps > 4 Then
                Penalty += Steps - 2
            End If
            Steps = 1
        Next

        Return (Penalty)
    End Function

    Private Function QRCode_Penalty_Two(ByVal Tilesize As Integer, ByVal Size As Integer, ByRef QRCode As Integer(,)) As Integer
        Dim Color As Integer = 0
        Dim Penalty As Integer = 0

        For i = 1 To Size - 1
            For e = 1 To Size - 1
                Color = QRCode_Check_Tile(Tilesize, i, e, QRCode)
                If Color = QRCode_Check_Tile(Tilesize, i + 1, e, QRCode) And Color = QRCode_Check_Tile(Tilesize, i + 1, e + 1, QRCode) And Color = QRCode_Check_Tile(Tilesize, i, e + 1, QRCode) Then

                    Penalty += 3
                End If
            Next
        Next
        Return (Penalty)
    End Function

    Private Function QRCode_Penalty_Three(ByVal Tilesize As Integer, ByVal Size As Integer, ByRef QRCode As Integer(,)) As Integer
        Dim Penalty As Integer = 0

        For i = 1 To Size - 10
            For e = 1 To Size - 10
                If QRCode_Check_Tile(Tilesize, i, e, QRCode) = 1 And _
                   QRCode_Check_Tile(Tilesize, i + 1, e, QRCode) = 0 And _
                   QRCode_Check_Tile(Tilesize, i + 2, e, QRCode) = 1 And _
                   QRCode_Check_Tile(Tilesize, i + 3, e, QRCode) = 1 And _
                   QRCode_Check_Tile(Tilesize, i + 4, e, QRCode) = 1 And _
                   QRCode_Check_Tile(Tilesize, i + 5, e, QRCode) = 0 And _
                   QRCode_Check_Tile(Tilesize, i + 6, e, QRCode) = 1 And _
                   QRCode_Check_Tile(Tilesize, i + 7, e, QRCode) = 0 And _
                   QRCode_Check_Tile(Tilesize, i + 8, e, QRCode) = 0 And _
                   QRCode_Check_Tile(Tilesize, i + 9, e, QRCode) = 0 And _
                   QRCode_Check_Tile(Tilesize, i + 10, e, QRCode) = 0 Then

                    Penalty += 40
                End If

                If QRCode_Check_Tile(Tilesize, i, e, QRCode) = 1 And _
                   QRCode_Check_Tile(Tilesize, i, e + 1, QRCode) = 0 And _
                   QRCode_Check_Tile(Tilesize, i, e + 2, QRCode) = 1 And _
                   QRCode_Check_Tile(Tilesize, i, e + 3, QRCode) = 1 And _
                   QRCode_Check_Tile(Tilesize, i, e + 4, QRCode) = 1 And _
                   QRCode_Check_Tile(Tilesize, i, e + 5, QRCode) = 0 And _
                   QRCode_Check_Tile(Tilesize, i, e + 6, QRCode) = 1 And _
                   QRCode_Check_Tile(Tilesize, i, e + 7, QRCode) = 0 And _
                   QRCode_Check_Tile(Tilesize, i, e + 8, QRCode) = 0 And _
                   QRCode_Check_Tile(Tilesize, i, e + 9, QRCode) = 0 And _
                   QRCode_Check_Tile(Tilesize, i, e + 10, QRCode) = 0 Then

                    Penalty += 40
                End If

                If QRCode_Check_Tile(Tilesize, i, e, QRCode) = 0 And _
                   QRCode_Check_Tile(Tilesize, i + 1, e, QRCode) = 0 And _
                   QRCode_Check_Tile(Tilesize, i + 2, e, QRCode) = 0 And _
                   QRCode_Check_Tile(Tilesize, i + 3, e, QRCode) = 0 And _
                   QRCode_Check_Tile(Tilesize, i + 4, e, QRCode) = 1 And _
                   QRCode_Check_Tile(Tilesize, i + 5, e, QRCode) = 0 And _
                   QRCode_Check_Tile(Tilesize, i + 6, e, QRCode) = 1 And _
                   QRCode_Check_Tile(Tilesize, i + 7, e, QRCode) = 1 And _
                   QRCode_Check_Tile(Tilesize, i + 8, e, QRCode) = 1 And _
                   QRCode_Check_Tile(Tilesize, i + 9, e, QRCode) = 0 And _
                   QRCode_Check_Tile(Tilesize, i + 10, e, QRCode) = 1 Then

                    Penalty += 40
                End If

                If QRCode_Check_Tile(Tilesize, i, e, QRCode) = 0 And _
                   QRCode_Check_Tile(Tilesize, i, e + 1, QRCode) = 0 And _
                   QRCode_Check_Tile(Tilesize, i, e + 2, QRCode) = 0 And _
                   QRCode_Check_Tile(Tilesize, i, e + 3, QRCode) = 0 And _
                   QRCode_Check_Tile(Tilesize, i, e + 4, QRCode) = 1 And _
                   QRCode_Check_Tile(Tilesize, i, e + 5, QRCode) = 0 And _
                   QRCode_Check_Tile(Tilesize, i, e + 6, QRCode) = 1 And _
                   QRCode_Check_Tile(Tilesize, i, e + 7, QRCode) = 1 And _
                   QRCode_Check_Tile(Tilesize, i, e + 8, QRCode) = 1 And _
                   QRCode_Check_Tile(Tilesize, i, e + 9, QRCode) = 0 And _
                   QRCode_Check_Tile(Tilesize, i, e + 10, QRCode) = 1 Then

                    Penalty += 40
                End If
            Next
        Next
        Return (Penalty)
    End Function

    Private Function QRCode_Penalty_Four(ByVal Tilesize As Integer, ByVal Size As Integer, ByRef QRCode As Integer(,)) As Integer
        Dim ColorBlack As Integer = 0
        Dim Value1 As Integer = 0
        Dim Value2 As Integer = 0
        Dim Penalty As Integer = 0

        For i = 1 To Size
            For e = 1 To Size
                If QRCode_Check_Tile(Tilesize, i, e, QRCode) = 1 Then
                    ColorBlack += 1
                End If
            Next
        Next
        ColorBlack = ColorBlack / (Size * Size) * 100

        Value1 = Math.Abs((ColorBlack - (ColorBlack Mod 5)) - 50) / 5
        Value2 = Math.Abs((ColorBlack + (5 - (ColorBlack Mod 5))) - 50) / 5

        If Value1 < Value2 Then
            Return (Value1 * 10)
        Else
            Return (Value2 * 10)
        End If

    End Function

    Private Sub QRCode_Bytes_Draw(ByVal Tilesize As Integer, ByVal Data As Byte(), ByVal Size As Integer, ByRef QRCode As Integer(,))
        Dim OffsetCounter As Integer = 0
        For i = Size To 1 Step -2
            If i = 7 Then
                i = 6
            End If
            For e = Size To 1 Step -1
                ' Check if the tile is available
                If QRCode_Check_Tile(Tilesize, i, e, QRCode) = -1 Then
                    ' Draw the tile
                    If Data(OffsetCounter) = 1 Then
                        QRCode_Draw_Tile(Tilesize, i, e, QRCode)
                    Else
                        QRCode_Clear_Tile(Tilesize, i, e, QRCode)
                    End If

                    ' Increment Offset Counter
                    OffsetCounter += 1
                End If

                ' Check if the next tile is available
                If (i - 1) > 0 Then
                    If QRCode_Check_Tile(Tilesize, i - 1, e, QRCode) = -1 Then
                        ' Draw the tile
                        If Data(OffsetCounter) = 1 Then
                            QRCode_Draw_Tile(Tilesize, i - 1, e, QRCode)
                        Else
                            QRCode_Clear_Tile(Tilesize, i - 1, e, QRCode)
                        End If

                        ' Increment Offset Counter
                        OffsetCounter += 1
                    End If
                End If
            Next

            ' Decrement i 
            i -= 2
            If i = 7 Then
                i = 6
            End If

            If i > 0 Then
                For e = 1 To Size
                    ' Check if the tile is available
                    If QRCode_Check_Tile(Tilesize, i, e, QRCode) = -1 Then
                        ' Draw the tile
                        If Data(OffsetCounter) = 1 Then
                            QRCode_Draw_Tile(Tilesize, i, e, QRCode)
                        Else
                            QRCode_Clear_Tile(Tilesize, i, e, QRCode)
                        End If

                        ' Increment Offset Counter
                        OffsetCounter += 1
                    End If

                    ' Check if the next tile is available
                    If (i - 1) > 0 Then
                        If QRCode_Check_Tile(Tilesize, i - 1, e, QRCode) = -1 Then
                            ' Draw the tile
                            If Data(OffsetCounter) = 1 Then
                                QRCode_Draw_Tile(Tilesize, i - 1, e, QRCode)
                            Else
                                QRCode_Clear_Tile(Tilesize, i - 1, e, QRCode)
                            End If

                            ' Increment Offset Counter
                            OffsetCounter += 1
                        End If
                    End If
                Next
            End If
        Next
    End Sub

    Private Sub QRCode_Reserve_Information(ByVal TileSize As Integer, ByVal Version As Integer, ByVal Size As Integer, ByRef QRCode As Integer(,))
        ' Check which version and reserve the information parts
        For i = 1 To 6
            QRCode_Clear_Tile(TileSize, i, 9, QRCode)
            QRCode_Clear_Tile(TileSize, 9, i, QRCode)
        Next

        QRCode_Clear_Tile(TileSize, 8, 9, QRCode)
        QRCode_Clear_Tile(TileSize, 9, 9, QRCode)
        QRCode_Clear_Tile(TileSize, 9, 8, QRCode)

        For i = 0 To 6
            QRCode_Clear_Tile(TileSize, Size - i, 9, QRCode)
            QRCode_Clear_Tile(TileSize, 9, Size - i, QRCode)
        Next

        QRCode_Clear_Tile(TileSize, Size - 7, 9, QRCode)

        If Version > 6 Then
            For i = 1 To 6
                For e = 0 To 2
                    QRCode_Clear_Tile(TileSize, i, Size - 8 - e, QRCode)
                    QRCode_Clear_Tile(TileSize, Size - 8 - e, i, QRCode)
                Next
            Next
        End If
    End Sub

    Private Sub QRCode_Alignment_Big(ByVal TileSize As Integer, ByVal XPosition As Integer, ByVal YPosition As Integer, ByVal Size As Integer, ByRef QRCode As Integer(,))
        ' Set the alignment pattern
        ' Draw the rectangle around
        For i = XPosition To (XPosition + 6)
            QRCode_Draw_Tile(TileSize, i, YPosition, QRCode)
            QRCode_Draw_Tile(TileSize, i, YPosition + 6, QRCode)
        Next
        For i = YPosition To (YPosition + 6)
            QRCode_Draw_Tile(TileSize, XPosition, i, QRCode)
            QRCode_Draw_Tile(TileSize, XPosition + 6, i, QRCode)
        Next

        ' Draw the white rectangle around
        For i = XPosition + 1 To (XPosition + 5)
            QRCode_Clear_Tile(TileSize, i, YPosition + 1, QRCode)
            QRCode_Clear_Tile(TileSize, i, YPosition + 5, QRCode)
        Next
        For i = YPosition + 1 To (YPosition + 5)
            QRCode_Clear_Tile(TileSize, XPosition + 1, i, QRCode)
            QRCode_Clear_Tile(TileSize, XPosition + 5, i, QRCode)
        Next

        'Draw the internal rectangle
        For i = (XPosition + 2) To (XPosition + 4)
            For e = (YPosition + 2) To (YPosition + 4)
                QRCode_Draw_Tile(TileSize, i, e, QRCode)
            Next
        Next

        ' Try to draw a rectangle around the patterns
        For i = XPosition - 1 To (XPosition + 7)
            If i > 0 And i <= Size Then
                If (YPosition - 1) > 0 Then
                    QRCode_Clear_Tile(TileSize, i, YPosition - 1, QRCode)
                End If
                If (YPosition + 7) <= Size Then
                    QRCode_Clear_Tile(TileSize, i, YPosition + 7, QRCode)
                End If
            End If
        Next
        For i = YPosition - 1 To (YPosition + 7)
            If i > 0 And i <= Size Then
                If (XPosition - 1) > 0 Then
                    QRCode_Clear_Tile(TileSize, XPosition - 1, i, QRCode)
                End If
                If (XPosition + 7) <= Size Then
                    QRCode_Clear_Tile(TileSize, XPosition + 7, i, QRCode)
                End If
            End If
        Next
    End Sub

    Private Sub QRCode_Alignment_Small(ByVal TileSize As Integer, ByVal XPosition As Integer, ByVal YPosition As Integer, ByRef QRCode As Integer(,))
        ' Set the alignment pattern
        ' Draw the rectangle around
        For i = XPosition To (XPosition + 4)
            QRCode_Draw_Tile(TileSize, i, YPosition, QRCode)
            QRCode_Draw_Tile(TileSize, i, YPosition + 4, QRCode)
        Next
        For i = YPosition To (YPosition + 4)
            QRCode_Draw_Tile(TileSize, XPosition, i, QRCode)
            QRCode_Draw_Tile(TileSize, XPosition + 4, i, QRCode)
        Next

        ' Draw the white rectangle around
        For i = XPosition + 1 To (XPosition + 3)
            QRCode_Clear_Tile(TileSize, i, YPosition + 1, QRCode)
            QRCode_Clear_Tile(TileSize, i, YPosition + 3, QRCode)
        Next
        For i = YPosition + 1 To (YPosition + 3)
            QRCode_Clear_Tile(TileSize, XPosition + 1, i, QRCode)
            QRCode_Clear_Tile(TileSize, XPosition + 3, i, QRCode)
        Next

        'Draw the internal rectangle
        QRCode_Draw_Tile(TileSize, XPosition + 2, YPosition + 2, QRCode)
    End Sub

    Private Sub QRCode_Timing(ByVal TileSize As Integer, ByVal Size As Integer, ByRef QRCode As Integer(,))
        ' Draw the horizontal and vertical pattern
        For i = 9 To (Size - 8) Step 2
            QRCode_Draw_Tile(TileSize, i, 7, QRCode)
            QRCode_Clear_Tile(TileSize, i + 1, 7, QRCode)
            QRCode_Draw_Tile(TileSize, 7, i, QRCode)
            QRCode_Clear_Tile(TileSize, 7, i + 1, QRCode)
        Next
    End Sub

    Private Sub QRCode_Alignment_Draw(ByVal TileSize As Integer, ByVal Size As Integer, ByVal Version As Integer, ByRef QRCode As Integer(,))
        ' Calculate the number of positions
        Dim Positions As Integer() = {0}
        Dim NumberofValues As Integer = 0

        Select Case Version
            Case 2
                Positions = {6, 18}
            Case 3
                Positions = {6, 22}
            Case 4
                Positions = {6, 26}
            Case 5
                Positions = {6, 30}
            Case 6
                Positions = {6, 34}
            Case 7
                Positions = {6, 22, 38}
            Case 8
                Positions = {6, 24, 42}
            Case 9
                Positions = {6, 26, 46}
            Case 10
                Positions = {6, 28, 50}
            Case 11
                Positions = {6, 30, 54}
            Case 12
                Positions = {6, 32, 58}
            Case 13
                Positions = {6, 34, 62}
            Case 14
                Positions = {6, 26, 46, 66}
            Case 15
                Positions = {6, 26, 48, 70}
            Case 16
                Positions = {6, 26, 50, 74}
            Case 17
                Positions = {6, 30, 54, 78}
            Case 18
                Positions = {6, 30, 56, 82}
            Case 19
                Positions = {6, 30, 58, 86}
            Case 20
                Positions = {6, 34, 62, 90}
            Case 21
                Positions = {6, 28, 50, 72, 94}
            Case 22
                Positions = {6, 26, 50, 74, 98}
            Case 23
                Positions = {6, 30, 54, 78, 102}
            Case 24
                Positions = {6, 28, 54, 80, 106}
            Case 25
                Positions = {6, 32, 58, 84, 110}
            Case 26
                Positions = {6, 30, 58, 86, 114}
            Case 27
                Positions = {6, 34, 62, 90, 118}
            Case 28
                Positions = {6, 26, 50, 74, 98, 122}
            Case 29
                Positions = {6, 30, 54, 78, 102, 126}
            Case 30
                Positions = {6, 26, 52, 78, 104, 130}
            Case 31
                Positions = {6, 30, 56, 82, 108, 134}
            Case 32
                Positions = {6, 34, 60, 86, 112, 138}
            Case 33
                Positions = {6, 30, 58, 86, 114, 142}
            Case 34
                Positions = {6, 34, 62, 90, 118, 146}
            Case 35
                Positions = {6, 30, 54, 78, 102, 126, 150}
            Case 36
                Positions = {6, 24, 50, 76, 102, 128, 154}
            Case 37
                Positions = {6, 28, 54, 80, 106, 132, 158}
            Case 38
                Positions = {6, 32, 58, 84, 110, 136, 162}
            Case 39
                Positions = {6, 26, 54, 82, 110, 138, 166}
            Case 40
                Positions = {6, 30, 58, 86, 114, 142, 170}
        End Select

        Select Case Version
            Case 2 To 6
                NumberofValues = 2
            Case 7 To 13
                NumberofValues = 3
            Case 14 To 20
                NumberofValues = 4
            Case 21 To 27
                NumberofValues = 5
            Case 28 To 34
                NumberofValues = 6
            Case 35 To 40
                NumberofValues = 7
        End Select

        ' Draw Timing Line
        QRCode_Timing(TileSize, Size, QRCode)

        ' Draw the big Alignment signs
        QRCode_Alignment_Big(TileSize, 1, 1, Size, QRCode)
        QRCode_Alignment_Big(TileSize, Size - 6, 1, Size, QRCode)
        QRCode_Alignment_Big(TileSize, 1, Size - 6, Size, QRCode)

        ' Draw the small Alignment signs
        For i = 1 To NumberofValues
            For e = 1 To NumberofValues
                If Not ((e = 1 And i = 1) Or (e = NumberofValues And i = 1) Or (i = NumberofValues And e = 1)) Then
                    QRCode_Alignment_Small(TileSize, (Positions(i - 1) - 1), ((Positions(e - 1) - 1)), QRCode)
                End If
            Next
        Next

        ' Draw the dark module
        QRCode_Draw_Tile(TileSize, 9, (4 * Version) + 10, QRCode)

    End Sub

    Public ColorDraw As Color = Color.Black
    Public ColorClear As Color = Color.White

    Private Sub QRCode_Draw_Tile(ByVal TileSize As Integer, ByVal XPosition As Integer, ByVal YPosition As Integer, ByRef QRCode As Integer(,))
        QRCode(XPosition - 1, YPosition - 1) = 1
    End Sub

    Private Sub QRCode_Clear_Tile(ByVal TileSize As Integer, ByVal XPosition As Integer, ByVal YPosition As Integer, ByRef QRCode As Integer(,))
        QRCode(XPosition - 1, YPosition - 1) = -1
    End Sub

    Private Function QRCode_Check_Tile(ByVal TileSize As Integer, ByVal XPosition As Integer, ByVal YPosition As Integer, ByRef QRCode As Integer(,))
        Dim TileColor As Integer = QRCode(XPosition - 1, YPosition - 1)

        If TileColor = 1 Then
            Return (1)
        ElseIf TileColor = -1 Then
            Return (0)
        Else
            Return (-1)
        End If
    End Function

    Private Sub QRCode_Draw_QRCode(ByVal TileSize As Integer, ByVal Size As Integer, ByRef QRCode As Integer(,), ByVal RandSize As Integer, ByRef QRCode_Image As FastPixel)
        QRCode_Image.Clear(Color.White)

        For f = 0 To Size - 1
            For g = 0 To Size - 1
                For i = (f) * TileSize To (f) * TileSize + TileSize - 1
                    For e = (g) * TileSize To (g) * TileSize + TileSize - 1
                        If QRCode(f, g) = 1 Then
                            QRCode_Image.SetPixel(i + RandSize * TileSize, e + RandSize * TileSize, Color.Black)
                        ElseIf QRCode(f, g) = -1 Then
                            QRCode_Image.SetPixel(i + RandSize * TileSize, e + RandSize * TileSize, Color.White)
                        Else
                            QRCode_Image.SetPixel(i + RandSize * TileSize, e + RandSize * TileSize, Color.Red)
                        End If
                    Next
                Next
            Next
        Next
    End Sub
End Module
